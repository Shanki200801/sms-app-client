{
  "version": 3,
  "sources": ["../../../app/routes/app.template.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.template.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.template.jsx\");\n  import.meta.hot.lastModified = \"1702538272739.156\";\n}\n// REMIX HMR END\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport shopify, { authenticate } from \"../shopify.server\";\nimport { ButtonGroup, Page, TextField, Button } from \"@shopify/polaris\";\nimport { useLoaderData, useLocation, useNavigate } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nexport async function loader({\n  request\n}) {\n  // await authenticate.admin(request);\n  const {\n    admin\n  } = await shopify.authenticate.admin(request);\n  //api call to get customer details\n  const response = await admin.graphql(`#graphql\n      query {\n        customers(first: 10) {\n          edges {\n            node {\n              id\n              phone\n              displayName\n              email\n            }\n          }\n        }\n      }`);\n  //api call to get product details\n  const response2 = await admin.graphql(`\n    {\n      products(first: 25) {\n        nodes {\n          title\n          description\n        }\n      } \n    }`);\n  //api call to fetch templates\n  const fetchTemplate = (url, templateName) => {\n    return fetch(url).then(response => response.text()).then(data => {\n      return {\n        name: templateName,\n        data: data\n      };\n    });\n  };\n  let templates = {};\n  await Promise.all([fetchTemplate(\"http://localhost:8000/productshowcase\", \"product showcase\"), fetchTemplate(\"http://localhost:8000/salenotification\", \"sale notification\"), fetchTemplate(\"http://localhost:8000/customeraddressing\", \"customer addressing\")]).then(results => {\n    results.forEach(result => {\n      templates[result.name] = result.data;\n    });\n  }).catch(error => console.error(\"Error:\", error));\n\n  //destructuring responses\n  const product_data = await response2.json();\n  const {\n    products\n  } = product_data.data;\n  const data = await response.json();\n  const {\n    customers\n  } = data.data;\n  const {\n    edges: customer_data\n  } = customers;\n  const return_data = {\n    customer_data: customer_data,\n    product_data: products,\n    templates: templates\n  };\n  console.log(\"data has been fetched in loaders and it is\", return_data);\n  return json(return_data);\n}\nconst getInitialValue = (choice, data) => {\n  console.log(\"get initial value called with data\", data);\n  if (choice === \"product-details\") {\n    return data.templates[\"product showcase\"];\n  }\n  if (choice === \"addressing\") {\n    return data.templates[\"customer addressing\"];\n  }\n  if (choice === \"discount-notification\") {\n    return data.templates[\"sale notification\"];\n  }\n  return \"\";\n};\nconst TemplateTextField = ({\n  initialTemplate,\n  onUpdate\n}) => {\n  _s();\n  console.log(\"re rendering text field component\");\n  const [template, setTemplate] = useState(initialTemplate);\n  const handleTemplateChange = useCallback(newValue => {\n    console.log(newValue, \" is the new value of template\");\n    setTemplate(newValue);\n  }, [template]);\n  return <div>\n      <TextField label=\"Template\" value={template} onChange={handleTemplateChange} multiline={5} autoComplete=\"off\" />\n      <Button primary onClick={onUpdate}>\n        Update template\n      </Button>\n    </div>;\n};\n_s(TemplateTextField, \"ZBcQqozCDATTvjTqu1klbZ8qlcc=\");\n_c = TemplateTextField;\nconst Template = () => {\n  _s2();\n  //add a use effect for choice\n  const data = useLoaderData();\n  console.log(\"trying to render Template component\");\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    messageType: choice\n  } = location.state || {};\n  const [template, setTemplate] = React.useState(() => getInitialValue(choice, data));\n  console.log(\"data inside component\", data);\n  const sendSMS = async () => {\n    //write api call to send sms\n    console.log(\"send sms called\");\n    //make a post request and send the template and the data object\n    try {\n      const response = await fetch(\"http://localhost:8000/sendSMS\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          template: template,\n          data: data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"data after sending sms\", data);\n    } catch (error) {\n      console.error(\"An error occurred while sending the sms:\", error);\n    }\n  };\n  const updateTemplate = async choice => {\n    //api call to update template in the database\n    console.log(\"update template called\");\n    let tempname = \"\";\n    if (choice === \"product-details\") {\n      tempname = \"Product Showcase\";\n    }\n    if (choice === \"addressing\") {\n      tempname = \"General Addressing\";\n    }\n    if (choice === \"discount-notification\") {\n      tempname = \"Sale Notification\";\n    }\n    try {\n      const response = await fetch(\"http://localhost:8000/updateTemplate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          templateName: tempname,\n          template: template\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"data after updating template\", data);\n    } catch (error) {\n      console.error(\"An error occurred while updating the template:\", error);\n    }\n  };\n  return <Page>\n      <h1 style={{\n      fontFamily: \"Arial, sans-serif\",\n      textAlign: \"left\",\n      fontSize: \"24px\",\n      fontWeight: \"bold\",\n      padding: \"20px 0\"\n    }}>\n        Take a look at the following template and hit send and edit it if\n        necessary.\n      </h1>\n      <h2 style={{\n      fontFamily: \"Arial, sans-serif\",\n      textAlign: \"left\",\n      fontSize: \"18px\",\n      fontWeight: \"bold\",\n      padding: \"8px 0\"\n    }}>\n        {\"Use {{customer_name}} to address customer's by name\"}\n      </h2>\n      <TemplateTextField initialTemplate={template} onUpdate={() => updateTemplate(choice)} />\n      {/* <Button primary onClick={updateTemplate}>\n        Update template\n       </Button> */}\n      <ButtonGroup>\n        <Button primary onClick={sendSMS}>\n          Send\n        </Button>\n        <Button onClick={navigate(\"/app/sms\")}>Cancel</Button>\n      </ButtonGroup>\n    </Page>;\n};\n_s2(Template, \"EAth0XPcpAgMrp3QUcl/5E4UTOw=\", false, function () {\n  return [useLoaderData, useLocation, useNavigate];\n});\n_c2 = Template;\nexport default Template;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemplateTextField\");\n$RefreshReg$(_c2, \"Template\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm", "React", "data", "choice"]
}
